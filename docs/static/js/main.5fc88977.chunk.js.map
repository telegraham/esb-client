{"version":3,"sources":["data/supportTexts.js","components/Form.component.js","components/ButterflyField.component.js","App.js","serviceWorker.js","index.js"],"names":["supportTexts","id","msg","pathName","socket","socketIOClient","handleSubmit","event","preventDefault","emit","target","value","Form","map","text","Button","onClick","key","type","ButterflyField","console","log","className","App","useState","setPathName","on","data","style","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oSAAaA,EAAe,CAC1B,CAAEC,GAAI,EAAGC,IAAK,eAAgBC,SAAU,iBACxC,CAAEF,GAAI,EAAGC,IAAK,eAAgBC,SAAU,mBACxC,CAAEF,GAAI,EAAGC,IAAK,mBAAoBC,SAAU,mBAC5C,CAAEF,GAAI,EAAGC,IAAK,gBAAiBC,SAAU,iBACzC,CAAEF,GAAI,EAAGC,IAAK,YAAaC,SAAU,oBCGjCC,EAASC,IADH,yBAGNC,EAAe,SAAAC,GACnBA,EAAMC,iBAGNJ,EAAOK,KAAK,YAAa,CACvBN,SAAUI,EAAMG,OAAOC,SAoBZC,EAjBF,WACX,OACE,8BACGZ,EAAaa,KAAI,SAAAC,GAAI,OACpB,kBAACC,EAAA,EAAD,CACEC,QAASV,EACTW,IAAKH,EAAKb,GACViB,KAAK,SACLP,MAAOG,EAAKX,UAEXW,EAAKZ,UCrBDiB,EALQ,SAAC,GAAkB,IAAhBhB,EAAe,EAAfA,SAExB,OADAiB,QAAQC,IAAI,yBAA0BlB,GAC/B,yBAAKmB,UAAU,SCmBTC,EAlBH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACTrB,EADS,KACCsB,EADD,KAUhB,OAPepB,IAAe,yBACvBqB,GAAG,aAAa,SAAAC,GAErBP,QAAQC,IAAI,gCAAiCM,GAC7CF,EAAYE,EAAKxB,aAIjB,yBAAKyB,MAAO,CAAEC,UAAW,WACvB,kBAAC,EAAD,CAAgB1B,SAAUA,IAC1B,kBAAC,EAAD,QCNc2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.5fc88977.chunk.js","sourcesContent":["export const supportTexts = [\n  { id: 1, msg: \"Nurse Strong\", pathName: \"BlueButterfly\" },\n  { id: 2, msg: \"You Got This\", pathName: \"YellowButterfly\" },\n  { id: 3, msg: \"Essential Worker\", pathName: \"OrangeButterfly\" },\n  { id: 4, msg: \"Doctor Strong\", pathName: \"PinkButterfly\" },\n  { id: 5, msg: \"Thank You\", pathName: \"PurpleButterfly\" }\n];\n","import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport socketIOClient from \"socket.io-client\";\nimport { Button } from \"reactstrap\";\n\nimport { supportTexts } from \"../data/supportTexts\";\n\nconst url = \"http://127.0.0.1:4001\";\nconst socket = socketIOClient(url);\n\nconst handleSubmit = event => {\n  event.preventDefault();\n\n  //On click, emit data to server\n  socket.emit(\"butterfly\", {\n    pathName: event.target.value\n  });\n};\nconst Form = () => {\n  return (\n    <form>\n      {supportTexts.map(text => (\n        <Button\n          onClick={handleSubmit}\n          key={text.id}\n          type=\"submit\"\n          value={text.pathName}\n        >\n          {text.msg}\n        </Button>\n      ))}\n    </form>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\n\nconst ButterflyField = ({ pathName }) => {\n  console.log(\"ButterflyField props: \", pathName);\n  return <div className=\"sky\"></div>;\n};\n\nexport default ButterflyField;\n","import React, { useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport Form from \"./components/Form.component\";\nimport ButterflyField from \"./components/ButterflyField.component\";\n\nconst App = () => {\n  const [pathName, setPathName] = useState(\"\");\n\n  const socket = socketIOClient(\"http://127.0.0.1:4001\");\n  socket.on(\"butterfly\", data => {\n    //data given to us from the server from the server\n    console.log(\"Client Listening For Server: \", data);\n    setPathName(data.pathName);\n  });\n\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <ButterflyField pathName={pathName} />\n      <Form />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}